name: Build and publish docker container

on:
  push:
    tags: [ "**" ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: npm ci
      - run: npm run lint
      - run: npm run type-check
  release:
    runs-on: ubuntu-latest
    needs: [ check ]
    env:
      CACHE_PARAMS: endpoint_url=${{ vars.CACHE_S3_ENDPOINT }},bucket=${{ vars.CACHE_S3_BUCKET }},region=${{ vars.CACHE_S3_REGION }},access_key_id=${{ vars.CACHE_S3_ACCESS_KEY }},secret_access_key=${{ secrets.CACHE_S3_SECRET_KEY }},upload_parallelism=8
    steps:
      - uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: "network=${{ vars.BUILD_NETWORK }}"
      - name: Login to Docker Hub
        env:
          USERNAME: ${{ secrets.DOCKER_IO_USERNAME }}
          PASSWORD: ${{ secrets.DOCKER_IO_PASSWORD }}
        if: ${{ env.USERNAME != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}
      - name: Login to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: . # needed for buildx to consider .gitignore
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64,linux/arm64
          pull: true
          push: true
          cache-from: type=s3,${{ env.CACHE_PARAMS }}
          cache-to: type=s3,mode=max,${{ env.CACHE_PARAMS }}
